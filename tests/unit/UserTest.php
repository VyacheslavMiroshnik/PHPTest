<?php

namespace unit;


use PHPUnit\Framework\TestCase;
use Vyacheslav\Classes\User;
class UserTest extends TestCase
{

    private User $user;
    public function setUp(): void
    {
        parent::setUp();
        // TODO: Change the autogenerated stub
        $this->user = new User();
        $this->user->db->insert( ['name' => 'John', 'email' => 'tugrp@example.com']);
        $this->user->db->insert( ['name' => 'John2', 'email' => '2@example.com']);
    }

    /**
     * @return User
     * @param
     */
    public function testNewUser():User
    {
        /**
         * @var array|mixed $result
         */
        $user = new User();
        $result = $user->db->get();
        $this->assertEmpty($result);
        return $user;
    }
    /**
     * @dataProvider providerInsert
     * @depends testNewUser
     */
    public function testInsert($expect,$actual,$user)
    {
        $user->db->insert($expect);
        $result = $user->db->get();
        $this->assertEquals($actual,$result);
    }
    public static function providerInsert():array
    {
        $expect =
            [
                ['name' => 'John', 'email' => 'tugrp@example.com'],
                ['name' => 'John2', 'email' => '2@example.com']
            ];
        $result =
            [
                [['name' => 'John', 'email' => 'tugrp@example.com']],
                [['name' => 'John', 'email' => 'tugrp@example.com'],['name' => 'John2', 'email' => '2@example.com']]
            ];
        return
            [
              ' insert first row'=>[$expect[0],$result[0]],
              'insert second row'=>[$expect[1],$result[1]]
            ];
    }

    /**
     * @dataProvider providerUpdate
     * */
    public function testUpdate($id,  $expect, $actual):void
    {
        /**
         * @var array|mixed $result
         */
        $result= $this->user->db->update($id,$expect);
        $this->assertEquals($actual,$result);
    }

    public static function providerUpdate():array
    {
        $expect =
            [
                ['name' => 'Update John', 'email' => 'tugrp@example.com'],
                ['name' => 'Update John2', 'email' => '2@example.com'],
                ['name' => 'Update John2', 'email' => '2@example.com']

            ];
        $result =
            [
                ['name' => 'Update John', 'email' => 'tugrp@example.com'],
                ['name' => 'Update John2', 'email' => '2@example.com'],
                []
            ];
        return
            [
                ' update first row'=>[0,$expect[0],$result[0]],
                'update second row'=>[1,$expect[1],$result[1]],
                'wrong id'=>[4,$expect[2],$result[2]]
            ];

    }


    /**
     * @dataProvider providerDelete
     * */


    public function testDelete($id,$actual):void
    {
        /**
         * @var array|mixed $result
         */
        $this->user->db->delete($id);
        $result = $this->user->db->get();
        $this->assertEquals($actual,$result);
    }

    public static function providerDelete():array
    {
        $expect =
            [
                5,
                0,
                1
            ];
        $results =
            [
                [['name' => 'John', 'email' => 'tugrp@example.com'], ['name' => 'John2', 'email' => '2@example.com']],
                ['1'=>['name' => 'John2', 'email' => '2@example.com']],
                ['0'=>['name' => 'John', 'email' => 'tugrp@example.com']]
            ];
        return
            [
                'id not exist' => [4,$results[0]],
                'delete first row'=>[$expect[1],$results[1]],
                'delete second row'=>[$expect[2],$results[2]]
            ];
    }



}
